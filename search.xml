<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Parallels17</title>
      <link href="/2022/05/03/Parallels17/"/>
      <url>/2022/05/03/Parallels17/</url>
      
        <content type="html"><![CDATA[<h3 id="解决-Parallels-Desktop-17-无法连接网络问题"><a href="#解决-Parallels-Desktop-17-无法连接网络问题" class="headerlink" title="解决 Parallels Desktop 17 无法连接网络问题"></a>解决 Parallels Desktop 17 无法连接网络问题</h3><ul><li>修改一下两个配置文件</li><li>/Library/Preferences/Parallels/dispatcher.desktop.xml<ul><li>修改 dispatcher.desktop.xml，找到 &lt;Usb&gt;0&lt;/Usb&gt;，修改为 &lt;Usb&gt;1&lt;/Usb&gt; 并保存。</li></ul></li><li>/Library/Preferences/Parallels/network.desktop.xml<ul><li>修改 network.desktop.xml，找到 &lt;UseKextless&gt;1&lt;/UseKextless&gt; 或 &lt;UseKextless&gt;-1&lt;/UseKextless&gt;，修改为 &lt;UseKextless&gt;0&lt;/UseKextless&gt; 并保存</li></ul></li></ul><h3 id="Parallels-Desktop-17-1-1-操作失败-执行该操作失败-解决方案"><a href="#Parallels-Desktop-17-1-1-操作失败-执行该操作失败-解决方案" class="headerlink" title="Parallels Desktop 17.1.1 操作失败 执行该操作失败 解决方案"></a>Parallels Desktop 17.1.1 操作失败 执行该操作失败 解决方案</h3><ul><li>选择 操作 -&gt; 配置 -&gt; 高级 -&gt; 虚拟机监控程序 -&gt; Parallels，重启即可</li></ul><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.jianshu.com/p/4a5fbe7d698f" target="_blank" rel="noopener">无法连接网络问题</a><br><a href="https://zhuanlan.zhihu.com/p/454602605" target="_blank" rel="noopener">执行该操作失败</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq</title>
      <link href="/2022/04/23/rocketmq/"/>
      <url>/2022/04/23/rocketmq/</url>
      
        <content type="html"><![CDATA[<h3 id="记一次使用-docker-安装-rocketMQ-记录"><a href="#记一次使用-docker-安装-rocketMQ-记录" class="headerlink" title="记一次使用 docker 安装 rocketMQ,记录"></a>记一次使用 docker 安装 rocketMQ,记录</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/concept.md" target="_blank" rel="noopener">基本概念</a></h4><ol><li>消息模型（Message Model）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。</code></pre><ol start="2"><li>消息生产者（Producer）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</code></pre><ol start="3"><li>消息消费者（Consumer）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</code></pre><ol start="4"><li>主题（Topic）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</code></pre><ol start="5"><li>代理服务器（Broker Server）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</code></pre><ol start="6"><li>名字服务（Name Server）</li></ol><pre class=" language-dotnetcli"><code class="language-dotnetcli">名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</code></pre><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/architecture.md" target="_blank" rel="noopener">架构设计</a></h4><ul><li><img src="/2022/04/23/rocketmq/rocketmq-architecture-1.png"></li></ul><h4 id="如何使用-docker-安装"><a href="#如何使用-docker-安装" class="headerlink" title="如何使用 docker 安装"></a>如何使用 docker 安装</h4><ol><li>安装 name-server</li></ol><ul><li><p>创建 namesrv 数据存储路径</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建rocketmq存储目录，以下称workspace，</span><span class="token comment" spellcheck="true"># 如： /Users/enochjs/docker/rocketmq，将所有${workspace}替换为你的工作目录，${ip}替换成你的ip</span><span class="token comment" spellcheck="true"># 创建日志和store目录</span>   <span class="token function">mkdir</span> -p <span class="token variable">${workspace}</span>/data/log   <span class="token function">mkdir</span> -p <span class="token variable">${workspace}</span>/data/store</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ${workspace} 换成你想存储的目录，如 /Users/enochjs/docker</span>docker pull rocketmqinc/rocketmqdocker run -d --restart<span class="token operator">=</span>always --name rmqnamesrv -p 9876:9876 -v <span class="token variable">${workspace}</span>/data/log:/root/logs -v <span class="token variable">${workspace}</span>/data/store:/root/store -e <span class="token string">"MAX_POSSIBLE_HEAP=100000000"</span> rocketmqinc/rocketmq sh mqnamesrv</code></pre></li></ul><ol start="2"><li><p>安装 broker</p><ul><li>创建 broker 相关存储节点</li></ul><pre class=" language-bash"><code class="language-bash"> <span class="token function">mkdir</span> -p  <span class="token variable">${workspace}</span>/broker/logs <span class="token variable">${workspace}</span>/broker/store <span class="token variable">${workspace}</span>/conf</code></pre><ul><li>在 ${workspace}/conf, 新建 broker.conf 编辑 broker.conf</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ8vb8kifrnrz3w56c34iiZ rocketmq<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi conf/broker.conf</span><span class="token comment" spellcheck="true"># 所属集群名称，如果节点较多可以配置多个</span>brokerClusterName <span class="token operator">=</span> DefaultCluster<span class="token comment" spellcheck="true">#broker名称，master和slave使用相同的名称，表明他们的主从关系</span>brokerName <span class="token operator">=</span> broker-a<span class="token comment" spellcheck="true">#0表示Master，大于0表示不同的slave</span>brokerId <span class="token operator">=</span> 0<span class="token comment" spellcheck="true">#表示几点做消息删除动作，默认是凌晨4点</span>deleteWhen <span class="token operator">=</span> 04<span class="token comment" spellcheck="true">#在磁盘上保留消息的时长，单位是小时</span>fileReservedTime <span class="token operator">=</span> 48<span class="token comment" spellcheck="true">#有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；</span>brokerRole <span class="token operator">=</span> ASYNC_MASTER<span class="token comment" spellcheck="true">#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；</span>flushDiskType <span class="token operator">=</span> ASYNC_FLUSH<span class="token comment" spellcheck="true">#name-server 地址</span>namesrvAddr <span class="token operator">=</span> <span class="token variable">${ip}</span>:9876<span class="token comment" spellcheck="true">#设置 broker 节点所在服务器的 ip 地址</span>brokerIP1 <span class="token operator">=</span> <span class="token variable">${ip}</span></code></pre><ul><li>启动 broker</li></ul><pre class=" language-bash"><code class="language-bash">docker run -d  --restart<span class="token operator">=</span>always --name rmqbroker --link rmqnamesrv:namesrv -p 10911:10911 -p 10909:10909 -v <span class="token variable">${workspace}</span>/broker/logs:/root/logs -v  <span class="token variable">${workspace}</span>/broker/store:/root/store -v <span class="token variable">${workspace}</span>/conf/broker.conf:/opt/rocketmq/conf/broker.conf -e <span class="token string">"NAMESRV_ADDR=<span class="token variable">${ip}</span>:9876"</span> -e <span class="token string">"MAX_POSSIBLE_HEAP=200000000"</span> rocketmqinc/rocketmq sh mqbroker -c /opt/rocketmq/conf/broker.conf</code></pre></li><li><p>安装控制台界面, 访问 http://${ip}:8888,即可</p><pre class=" language-bash"><code class="language-bash"> docker pull pangliang/rocketmq-console-ng docker run -d --restart<span class="token operator">=</span>always --name rmqadmin -e <span class="token string">"JAVA_OPTS=-Drocketmq.namesrv.addr=<span class="token variable">${ip}</span>:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"</span> -p 8888:8080 pangliang/rocketmq-console-ng</code></pre></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/apache/rocketmq/tree/master/docs/cn" target="_blank" rel="noopener">官方文档</a><br><a href="https://codeantenna.com/a/ZZWuyeurXj" target="_blank" rel="noopener">安装参考</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typeORM</title>
      <link href="/2022/03/08/typeorm/"/>
      <url>/2022/03/08/typeorm/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>TypeORM 是一个 ORM(object-relational mapping)框架,可以在能执行 js 或者 ts 的环境中使用</li><li>设计目标：让你可以用最少的 js 代码，完成各种数据库操作</li><li>TypeORM 同时支持 Active Record 模式和 Data Mapper 模式</li></ol><h4 id="介绍-Active-Record-和-Data-Mapper"><a href="#介绍-Active-Record-和-Data-Mapper" class="headerlink" title="介绍 Active Record 和 Data Mapper"></a><a href="https://typeorm.io/active-record-data-mapper" target="_blank" rel="noopener">介绍 Active Record 和 Data Mapper</a></h4><ol><li><p>active record</p><ul><li>具体概念建议百度</li><li>通过模型访问数据库，在模型中定义所有的查询方法</li><li>需要继承 BaseEntity</li></ul></li><li><p>Data Mapper</p><ul><li>数据模型只定义属性，不提供数据库操作</li><li>不需要继承 BaseEntity</li><li>自己定义单独的 class，一般称为“repositories”</li></ul></li><li><p>举个栗子，假设你有一个用户 model，你想根据 firstName+lastName 查询一个人</p><ul><li>Active Record 模式</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BaseEntity<span class="token punctuation">,</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  isActive<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">findByName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"user.firstName = :firstName"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> firstName <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">"user.lastName = :lastName"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> lastName <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 查询</span><span class="token keyword">const</span> timber <span class="token operator">=</span> await User<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"Timber"</span><span class="token punctuation">,</span> <span class="token string">"Saw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>data mapping 模式</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  isActive<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 查询</span><span class="token keyword">const</span> timber <span class="token operator">=</span> await userRepository<span class="token punctuation">.</span><span class="token function">findOneBy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">"Timber"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Saw"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><ul><li>eager: boolean, 设置为 true 时，当主 entity 查询时，会返回关联数据</li><li>cascade: boolean | (“insert” | “update”)[] , 新增或者更新 entity 时，会同步保存关联关系</li><li>onDelete: “RESTRICT”|”CASCADE”|”SET NULL”, 定义删除时，外健对应的行为</li><li>nullable: boolean，关联关系是否允许为空</li><li>orphanedRowAction: “nullify” | “delete” | “soft-delete”, 删除子数据时，子数据的存储方式</li></ul><h4 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="JoinColumn"></a>JoinColumn</h4><ul><li><p>在当前表中加列名</p></li><li><p>options</p><ul><li>name：指定关联关系列名，默认是 id</li><li>referencedColumnName，指定关联表里的列名</li></ul><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">ManyToOne</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> Category<span class="token punctuation">)</span>@<span class="token function">JoinColumn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"category_id"</span><span class="token punctuation">,</span> referencedColumnName<span class="token punctuation">:</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"locale_id"</span><span class="token punctuation">,</span> referencedColumnName<span class="token punctuation">:</span> <span class="token string">"locale_id"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>category<span class="token punctuation">:</span> Category<span class="token punctuation">;</span></code></pre></li></ul><h4 id="JoinTable"><a href="#JoinTable" class="headerlink" title="JoinTable"></a>JoinTable</h4><ul><li><p>用在 many-to-many 中，创建关联关系表</p></li><li><p>options</p><ul><li><p>name，tableName</p></li><li><p>joinColumn</p><ul><li>name</li><li>referencedColumnName</li></ul></li><li><p>inverseJoinColumn</p><ul><li>name</li><li>referencedColumnName</li></ul><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">ManyToMany</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> Category<span class="token punctuation">)</span>@<span class="token function">JoinTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"question_categories"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// table name for the junction table of this relation</span>    joinColumn<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"question"</span><span class="token punctuation">,</span>        referencedColumnName<span class="token punctuation">:</span> <span class="token string">"id"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    inverseJoinColumn<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span>        referencedColumnName<span class="token punctuation">:</span> <span class="token string">"id"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>categories<span class="token punctuation">:</span> Category<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h4 id="one-to-one"><a href="#one-to-one" class="headerlink" title="one-to-one"></a>one-to-one</h4><ul><li><p>需要使用 JoinColumn，指定关联关系</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Profile</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  gender<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  photo<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Entity<span class="token punctuation">,</span>  PrimaryGeneratedColumn<span class="token punctuation">,</span>  Column<span class="token punctuation">,</span>  OneToOne<span class="token punctuation">,</span>  JoinColumn<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Profile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Profile"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">OneToOne</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Profile<span class="token punctuation">)</span>  @<span class="token function">JoinColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  profile<span class="token punctuation">:</span> Profile<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="Many-to-one-one-to-many"><a href="#Many-to-one-one-to-many" class="headerlink" title="Many-to-one / one-to-many"></a>Many-to-one / one-to-many</h4><ul><li><p>可以省略 JoinColumn，会自动在 many-to-one entity 中保存关联关系</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> ManyToOne <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./User"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Photo</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">ManyToOne</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>photos<span class="token punctuation">)</span>  user<span class="token punctuation">:</span> User<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> OneToMany <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Photo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Photo"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">OneToMany</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Photo<span class="token punctuation">,</span> <span class="token punctuation">(</span>photo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> photo<span class="token punctuation">.</span>user<span class="token punctuation">)</span>  photos<span class="token punctuation">:</span> Photo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="many-to-many"><a href="#many-to-many" class="headerlink" title="many-to-many"></a>many-to-many</h4><ul><li><p>需要使用 JoinTable 指定关联关系</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Entity<span class="token punctuation">,</span>  PrimaryGeneratedColumn<span class="token punctuation">,</span>  Column<span class="token punctuation">,</span>  ManyToMany<span class="token punctuation">,</span>  JoinTable<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"typeorm"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Category <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Category"</span><span class="token punctuation">;</span>@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Question</span> <span class="token punctuation">{</span>  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  text<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">ManyToMany</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Category<span class="token punctuation">)</span>  @<span class="token function">JoinTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  categories<span class="token punctuation">:</span> Category<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="Enabling-logging"><a href="#Enabling-logging" class="headerlink" title="Enabling logging"></a>Enabling logging</h4><ul><li><p>打印 sql 日志</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"mysql"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">"mysql"</span><span class="token punctuation">,</span>    host<span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>    logging<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://typeorm.io/" target="_blank" rel="noopener">官方文档</a><br><a href="https://orkhan.gitbook.io/typeorm/" target="_blank" rel="noopener">gitBook</a></p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react-native-vector-icons 安装使用</title>
      <link href="/2022/02/16/react-native-vector-icons/"/>
      <url>/2022/02/16/react-native-vector-icons/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>react-native 字体图标库</li><li>支持字体图标库<ul><li>AntDesign</li><li>Entypo</li><li>EvilIcons</li><li>Feather</li><li>FontAwesome</li><li>FontAwesome 5</li><li>Fontisto</li><li>Foundation</li><li>Ionicons</li><li>MaterialIcons</li><li>MaterialCommunityIcons</li><li>Octicons</li><li>Zocial</li><li>SimpleLineIcons</li></ul></li></ol><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><ol><li><p>yarn add react-native-vector-icons (yarn add @types/react-native-vector-icons -D)</p></li><li><p>执行 ios pod install</p><ul><li>cd ios</li><li>pod install</li></ul></li><li><p>进到 node_modules/react-native-vector-icons，将需要使用的字体文件 copy 到项目中</p><ul><li><img src="/2022/02/16/react-native-vector-icons/fonts.jpg"></li></ul></li><li><p>修改 info.plist, 右键打开，open as =&gt; source code, 复制以下代码</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>key<span class="token operator">></span>UIAppFonts<span class="token operator">&lt;</span><span class="token operator">/</span>key<span class="token operator">></span>    <span class="token operator">&lt;</span>array<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>AntDesign<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Entypo<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>EvilIcons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Feather<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>FontAwesome<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>FontAwesome5_Brands<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>FontAwesome5_Regular<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>FontAwesome5_Solid<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Foundation<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Ionicons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>MaterialIcons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>MaterialCommunityIcons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>SimpleLineIcons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Octicons<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Zocial<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>        <span class="token operator">&lt;</span>string<span class="token operator">></span>Fonts<span class="token operator">/</span>Fontisto<span class="token punctuation">.</span>ttf<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span></code></pre></li><li><p>关联字体文件</p></li></ol><ul><li><img src="/2022/02/16/react-native-vector-icons/build_phase.jpg"></li></ul><ol start="6"><li>删除 ios/build, 重新构建使用</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="noopener">react-native-vector-icons github</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TS-decorator</title>
      <link href="/2021/06/04/TS-decorator/"/>
      <url>/2021/06/04/TS-decorator/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre><code>ts 文档With the introduction of Classes in TypeScript and ES6, there now exist certain scenariosthat require additional features to support annotating or modifying classes and class members.Decorators provide a way to add both annotations and a meta-programming syntaxfor class declarations and members</code></pre><p>翻译： ts 和 es6 引入 class 之后，有一些场景需要的支持注解或者修改 class 和 class 的 members。Decorators 为 class 和 class member 提供了注解和元编程的语法；<br>装饰器的目的是改变类、方法、属性的默认行为，并不属于运行时，作用于 prototype 上，所以设计上，就不会随着不同实例而改变，以上仅个人理解，不足参考<br>（只能用于 class 自身的行为，与运行上下文无关）</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="class-Decorator"><a href="#class-Decorator" class="headerlink" title="class Decorator"></a>class Decorator</h4><pre><code>A Class Decorator is declared just before a class declaration.The class decorator is applied to the constructor of the class andcan be used to observe, modify, or replace a class definition.</code></pre><p>翻译：class decorator 作用于 class 的 constructor, 可以监听、修改、或者替换 class 的定义</p><p>语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// your operate</span><span class="token punctuation">}</span></code></pre><p>示例 1 - 修改 class</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sealed</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>@sealed<span class="token keyword">class</span> <span class="token class-name">BugReport</span> <span class="token punctuation">{</span>  type <span class="token operator">=</span> <span class="token string">"report"</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例 2 - 修改构造函数</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> reportableClassDecorator<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>  <span class="token keyword">constructor</span><span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> <span class="token keyword">constructor</span> <span class="token punctuation">{</span>    reportingURL <span class="token operator">=</span> <span class="token string">"http://www..."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>@reportableClassDecorator<span class="token keyword">class</span> <span class="token class-name">BugReport</span> <span class="token punctuation">{</span>  type <span class="token operator">=</span> <span class="token string">"report"</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> bug <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BugReport</span><span class="token punctuation">(</span><span class="token string">"Needs dark mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bug<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prints "Needs dark mode"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bug<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prints "report"</span><span class="token comment" spellcheck="true">// 装饰器并不会修改原本的class 类型，bug.reportingURL，ts会报类型未定义错误；</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bug<span class="token punctuation">.</span>reportingURL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prints "http://www..."</span></code></pre><h4 id="method-decorator"><a href="#method-decorator" class="headerlink" title="method decorator"></a>method decorator</h4><pre><code>The decorator is applied to the Property Descriptor for the method,and can be used to observe, modify, or replace a method definition</code></pre><p>翻译：方法装饰器，调用方法的 Property Descriptor，可以监听、修改、或者替换方法的定义</p><p>语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>    propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    descriptor<span class="token punctuation">:</span> PropertyDescriptor  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// your code</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">enumerable</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>    propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    descriptor<span class="token punctuation">:</span> PropertyDescriptor  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">enumerable</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="访问器装饰-accessor"><a href="#访问器装饰-accessor" class="headerlink" title="访问器装饰 accessor"></a>访问器装饰 accessor</h4><pre><code>The accessor decorator is applied to the Property Descriptorfor the accessor and can be used to observe, modify, or replace an accessor’s definitions.</code></pre><p>accessor 装饰器，调用 accessor 的 Property Descriptor，可以监听、修改或者替换 accessor 的定义， 注意不能同时修改同一个属性的 setter 和 getter 方法</p><p>语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">accessorDecorator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>    propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    descriptor<span class="token punctuation">:</span> PropertyDescriptor  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// your code</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">configurable</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>    propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    descriptor<span class="token punctuation">:</span> PropertyDescriptor  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> _x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">configurable</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token keyword">get</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">configurable</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>  <span class="token keyword">get</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="属性装饰器-Property-Decorators"><a href="#属性装饰器-Property-Decorators" class="headerlink" title="属性装饰器 Property Decorators"></a>属性装饰器 Property Decorators</h4><pre><code>The expression for the property decorator will be called as a function at runtime, with the following two arguments:  1.Either the constructor function of the class for a static member, or the prototype of the class for an instance member.  2. The name of the member.</code></pre><p>语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 可配合reflect-metadata使用, 因为属性的使用一般是在其他的方法中，装饰器是作用域原型链中，因此想要获取修改的属性，需要先存起来，再获取</span><span class="token keyword">function</span> <span class="token function">PropertyDecorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// your code</span><span class="token punctuation">}</span></code></pre><p>示例</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">"reflect-metadata"</span><span class="token punctuation">;</span><span class="token keyword">const</span> formatMetadataKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span>formatString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span>formatMetadataKey<span class="token punctuation">,</span> formatString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFormat</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>formatMetadataKey<span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  @<span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hello, %s"</span><span class="token punctuation">)</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> formatString <span class="token operator">=</span> <span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"greeting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> formatString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Parameter-Decorators"><a href="#Parameter-Decorators" class="headerlink" title="Parameter Decorators"></a>Parameter Decorators</h4><p>语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 可配合reflect-metadata使用, 装饰器是作用域原型链中，因此想要获取修改的参数值，需要先存起来，再获取</span><span class="token keyword">function</span> <span class="token function">paramDecorator</span><span class="token punctuation">(</span>  target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  propertyKey<span class="token punctuation">:</span> sting <span class="token operator">|</span> symbol<span class="token punctuation">,</span>  parameterIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// your code</span><span class="token punctuation">}</span></code></pre><p>例子</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">"reflect-metadata"</span><span class="token punctuation">;</span><span class="token keyword">const</span> requiredMetadataKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">required</span><span class="token punctuation">(</span>  target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> symbol<span class="token punctuation">,</span>  parameterIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> existingRequiredParameters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>    Reflect<span class="token punctuation">.</span><span class="token function">getOwnMetadata</span><span class="token punctuation">(</span>requiredMetadataKey<span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  existingRequiredParameters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parameterIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>    requiredMetadataKey<span class="token punctuation">,</span>    existingRequiredParameters<span class="token punctuation">,</span>    target<span class="token punctuation">,</span>    propertyKey  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>  target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  propertyName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token keyword">Function</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> method <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">;</span>  descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> requiredParameters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getOwnMetadata</span><span class="token punctuation">(</span>      requiredMetadataKey<span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      propertyName    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> parameterIndex of requiredParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          parameterIndex <span class="token operator">>=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">||</span>          arguments<span class="token punctuation">[</span>parameterIndex<span class="token punctuation">]</span> <span class="token operator">===</span> undefined        <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Missing required argument."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BugReport</span> <span class="token punctuation">{</span>  type <span class="token operator">=</span> <span class="token string">"report"</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @validate  <span class="token function">print</span><span class="token punctuation">(</span>@required verbose<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\ntitle: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ts-decorator-语法糖代码"><a href="#ts-decorator-语法糖代码" class="headerlink" title="ts decorator 语法糖代码"></a>ts decorator 语法糖代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> __decorate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 参数个数</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 参数个数小于3 class decorator r=target; 否则 属性装饰器（function、property、param）都属于属性装饰器，获取属性描述desc</span>  <span class="token keyword">var</span> r <span class="token operator">=</span>    c <span class="token operator">&lt;</span> <span class="token number">3</span>      <span class="token operator">?</span> target      <span class="token punctuation">:</span> desc <span class="token operator">===</span> <span class="token keyword">null</span>      <span class="token operator">?</span> <span class="token punctuation">(</span>desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> desc<span class="token punctuation">;</span>  <span class="token keyword">var</span> d<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果用了 reflect-metadata 这个库</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>decorate <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> decorators<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">=</span> decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// class 执行 d(constructor); 其他 （target key descriptor）</span>        r <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">:</span> c <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> r<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 不是类装饰器，覆盖或写入key，类 返回 包裹后的 r</span>  <span class="token keyword">return</span> c <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> __metadata <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__metadata<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>metadata <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> __param <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__param<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>paramIndex<span class="token punctuation">,</span> decorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">decorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="如何开启"><a href="#如何开启" class="headerlink" title="如何开启"></a>如何开启</h3><p>tsconfig.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES5"</span><span class="token punctuation">,</span>    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 如果引入了 reflect-metadata    <span class="token property">"emitDecoratorMetadata"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"reflect-metadata"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">ts 文档</a></li><li><a href="http://blog.wolksoftware.com/decorators-reflection-javascript-typescript" target="_blank" rel="noopener">不错的文章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
          <category> decorator </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HSTS</title>
      <link href="/2021/02/26/HSTS/"/>
      <url>/2021/02/26/HSTS/</url>
      
        <content type="html"><![CDATA[<h3 id="HSTS是什么"><a href="#HSTS是什么" class="headerlink" title="HSTS是什么"></a>HSTS是什么</h3><p>HSTS全称HTTP Strict-Transport-Security</p><pre><code>The HTTP Strict-Transport-Security response header (often abbreviated as HSTS)lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.</code></pre><p>就是是hsts是由服务端设置response header 为 Strict-Transport-Security，告诉浏览器，只支持https请求，http请求会被307重定向为https</p><pre><code>Strict-Transport-Security: max-age= expire-timeStrict-Transport-Security: max-age= expire-time; includeSubDomainsStrict-Transport-Security: max-age=expire-time; preloadmax-age=expire-timeThe time, in seconds, that the browser should remember that a site is only to be accessed using HTTPS. （当前域名只接受https）includeSubDomains 可选If this optional parameter is specified, this rule applies to all of the site&#39;s subdomains as well. （当前域名、子域名，只接受https）preload 可选 (看起来是说会预加载)，浏览器有个内置列表，在这个列表内，无论什么时候访问都是https</code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre><code>Note: The Strict-Transport-Security header is ignored by the browser when your site is accessed using HTTP;this is because an attacker may intercept HTTP connections and inject the header or remove it.When your site is accessed over HTTPS with no certificate errors,the browser knows your site is HTTPS capable and will honor the Strict-Transport-Security header.</code></pre><p>就是说，http 请求设置Strict-Transport-Security浏览器是不会生效的，因为攻击者可能会拦截请求更改header，如果https的请求通过了认证，浏览器就会设置Strict-Transport-Security </p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>让所有的请求都通过https访问，不允许http请求访问</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li><p>访问 <a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com</a>, 查看network, 会发现会被307重定向到https<br><img src="/2021/02/26/HSTS/baidu307.jpg"><br><img src="/2021/02/26/HSTS/baidu307detail.jpg"></p></li><li><p>chrome 访问 chrome://net-internals/#hsts, 我们会发现已经有了hsts配置，如下图<br><img src="/2021/02/26/HSTS/hsts-detail.jpg"></p></li><li><p>删除 hsts配置<br><img src="/2021/02/26/HSTS/hsts-delete.jpg"></p></li><li><p>在访问 <a href="http://www.baid.com/" target="_blank" rel="noopener">http://www.baid.com</a>, 查看network, 会发现有一个302的请求（客户端重定向）<br><img src="/2021/02/26/HSTS/baidu302.jpg"><br><img src="/2021/02/26/HSTS/baidu302detail.jpg"></p></li><li><p>我们再看看 <a href="https://www.baid.com/" target="_blank" rel="noopener">https://www.baid.com</a> 的response header<br><img src="/2021/02/26/HSTS/baidu-https-detail.jpg"></p></li><li><p>这个时候再去看看chrome hsts设置，已经又有了</p></li></ol><p>总结：一开始浏览器没有hsts设置的时候，浏览器是不会强制将请求重定向到https的，一般的解决方案是，由302重定向到https，这个时候https返回hsts设置，浏览器校验证书通过，设置hsts信息，再访问的时候，浏览器就会根据配置自动重定向到https，向服务器发送https请求。（这也就是为什么我们第一次访问的时候回307，因为我们之前已经访问过百度，浏览器已经配置过hsts了）</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zhuanlan.zhihu.com/p/25537440" target="_blank" rel="noopener">HSTS详解</a><br><a href="https://appuals.com/how-to-clear-or-disable-hsts-for-chrome-firefox-and-internet-explorer/" target="_blank" rel="noopener">如何删除hsts</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security" target="_blank" rel="noopener">MDN</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>charles总结</title>
      <link href="/2021/02/25/charles%E6%80%BB%E7%BB%93/"/>
      <url>/2021/02/25/charles%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="charles-是什么？"><a href="#charles-是什么？" class="headerlink" title="charles 是什么？"></a>charles 是什么？</h3><pre><code>官方解释：  Charles is an HTTP proxy / HTTP monitor / Reverse Proxy  that enables a developer to view all of the HTTP and SSL / HTTPS traffic  between their machine and the Internet.  This includes requests, responses and the HTTP headers  (which contain the cookies and caching information).</code></pre><p>解释：charles 是一个代理、监控、反向代理的服务器，可以抓取 http、https 的网络请求，包含 requests, responses and the HTTP headers</p><h3 id="什么是代理（proxy）"><a href="#什么是代理（proxy）" class="headerlink" title="什么是代理（proxy）"></a>什么是代理（proxy）</h3><p>代理类似于中间商，我将需求告诉代理服务器，代理服务器处理之后，发给真正的服务器，然后将结果返回给我，而 charles 代理的是 http、https 请求（这个时候就可以对请求做任意的改动，如修改入参、修改 header、修改 response 等）</p><h3 id="手机如何通过-charles-走代理"><a href="#手机如何通过-charles-走代理" class="headerlink" title="手机如何通过 charles 走代理"></a>手机如何通过 charles 走代理</h3><ol><li>手机开启代理<br>设置 =&gt; 无线局域网 =&gt; 选择 wifi =&gt; 点击 wifi，进入网络设置 =&gt; 配置代理 =&gt; 选择手动 =&gt; 服务器填写：电脑 ip 端口写 8888（charles 默认端口 8888）</li><li>如何查看电脑 ip</li></ol><ul><li>mac =&gt; ifconfig en0</li><li>windows =&gt; ipconfig</li><li>charles =&gt; help =&gt; local address</li></ul><ol start="3"><li>代理 https (https 需要开启 ssl，手机需要安装证书，否则无法访问)</li></ol><ul><li>手机上需要装 charles 的证书<br>a. 手机代理到电脑之后访问 chls.pro/ssl (手机代理到 charles 之后，charles 就相当于服务器，证书由当前电脑上的 charles 下发，所以每个电脑都是不一样的，测试机访问不同的电脑，都需要安装对应电脑上下发的证书)<br>b. 下载证书<br>c. 安装证书<br>d. ios10 以上需要信任证书 （设置 =&gt; 通用 =&gt; 关于本机 =&gt; 证书信任设置 =&gt; 开启信任）<br>e. 描述文件 （设置 =&gt; 通用 =&gt; 描述文件与设备管理，可查看证书信息）<br>f. charles =&gt; proxy =&gt; ssl proxy settting =&gt; host: *, port: 443</li><li>开启 ssl proxy<br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/ssl-proxy.jpg"><br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/ssl-proxy-setting.jpg"><br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/ssl-proxy-setting-add.jpg"></li></ul><h3 id="常见用法-Q-amp-A"><a href="#常见用法-Q-amp-A" class="headerlink" title="常见用法 Q&amp;A"></a>常见用法 Q&amp;A</h3><ol><li>我想让我访问的 xxx 网站的 html、js 等资源，访问到我本地（如测试环境地址为 xxx.test.xxx, 我希望手机访问这个网站的时候，访问我本地的资源文件）</li></ol><ul><li>charles =&gt; tools =&gt; rewrite</li><li><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/rewrite-assets.jpg"></li></ul><ol start="2"><li>我想给目标的请求加 header 怎么办呢？</li></ol><ul><li>charles =&gt; tools =&gt; rewrite</li><li>添加 header<br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/header.jpg"><br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/add-header.jpg"></li><li>当然也可以添加其他的，如 queryParam、body 等<br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/other.jpg"></li></ul><ol start="2"><li><p>设置 filter<br><img src="/2021/02/25/charles%E6%80%BB%E7%BB%93/filter.jpg"></p></li><li><p>focus<br>选中链接 =&gt; 右键 =&gt; focus</p></li></ol><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.charlesproxy.com/latest-release/download.do" target="_blank" rel="noopener">download</a><br><a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noopener">charles-register</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios总结</title>
      <link href="/2020/09/17/axios%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/17/axios%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li><li>本文主要是基于axios官方文档，想了解更多，请移步github</li><li>后面有一个execl下载的实现demo，有需要可以看下</li><li>axios.default === axios</li></ol><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `url` is the server URL that will be used for the request</span>  url<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `method` is the request method to be used when making the request</span>  method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `baseURL` will be prepended to `url` unless `url` is absolute.</span>  <span class="token comment" spellcheck="true">// It can be convenient to set `baseURL` for an instance of axios to pass relative URLs</span>  <span class="token comment" spellcheck="true">// to methods of that instance.</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformRequest` allows changes to the request data before it is sent to the server</span>  <span class="token comment" spellcheck="true">// This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'</span>  <span class="token comment" spellcheck="true">// The last function in the array must return a string or an instance of Buffer, ArrayBuffer,</span>  <span class="token comment" spellcheck="true">// FormData or Stream</span>  <span class="token comment" spellcheck="true">// You may modify the headers object.</span>  transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want to transform the data</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformResponse` allows changes to the response data to be made before</span>  <span class="token comment" spellcheck="true">// it is passed to then/catch</span>  transformResponse<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want to transform the data</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `headers` are custom headers to be sent</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `params` are the URL parameters to be sent with the request</span>  <span class="token comment" spellcheck="true">// Must be a plain object or a URLSearchParams object</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ID<span class="token punctuation">:</span> <span class="token number">12345</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `paramsSerializer` is an optional function in charge of serializing `params`</span>  <span class="token comment" spellcheck="true">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>  paramsSerializer<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>arrayFormat<span class="token punctuation">:</span> <span class="token string">'brackets'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `data` is the data to be sent as the request body</span>  <span class="token comment" spellcheck="true">// Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'</span>  <span class="token comment" spellcheck="true">// When no `transformRequest` is set, must be of one of the following types:</span>  <span class="token comment" spellcheck="true">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>  <span class="token comment" spellcheck="true">// - Browser only: FormData, File, Blob</span>  <span class="token comment" spellcheck="true">// - Node only: Stream, Buffer</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// syntax alternative to send data into the body</span>  <span class="token comment" spellcheck="true">// method post</span>  <span class="token comment" spellcheck="true">// only the value is sent, not the key</span>  data<span class="token punctuation">:</span> <span class="token string">'Country=Brasil&amp;City=Belo Horizonte'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `timeout` specifies the number of milliseconds before the request times out.</span>  <span class="token comment" spellcheck="true">// If the request takes longer than `timeout`, the request will be aborted.</span>  timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default is `0` (no timeout)</span>  <span class="token comment" spellcheck="true">// `withCredentials` indicates whether or not cross-site Access-Control requests</span>  <span class="token comment" spellcheck="true">// should be made using credentials</span>  withCredentials<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `adapter` allows custom handling of requests which makes testing easier.</span>  <span class="token comment" spellcheck="true">// Return a promise and supply a valid response (see lib/adapters/README.md).</span>  adapter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `auth` indicates that HTTP Basic auth should be used, and supplies credentials.</span>  <span class="token comment" spellcheck="true">// This will set an `Authorization` header, overwriting any existing</span>  <span class="token comment" spellcheck="true">// `Authorization` custom headers you have set using `headers`.</span>  <span class="token comment" spellcheck="true">// Please note that only HTTP Basic auth is configurable through this parameter.</span>  <span class="token comment" spellcheck="true">// For Bearer tokens and such, use `Authorization` custom headers instead.</span>  auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'janedoe'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'s00pers3cret'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `responseType` indicates the type of data that the server will respond with</span>  <span class="token comment" spellcheck="true">// options are: 'arraybuffer', 'document', 'json', 'text', 'stream'</span>  <span class="token comment" spellcheck="true">//   browser only: 'blob'</span>  responseType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `responseEncoding` indicates encoding to use for decoding responses (Node.js only)</span>  <span class="token comment" spellcheck="true">// Note: Ignored for `responseType` of 'stream' or client-side requests</span>  responseEncoding<span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span>  xsrfCookieName<span class="token punctuation">:</span> <span class="token string">'XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span>  xsrfHeaderName<span class="token punctuation">:</span> <span class="token string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `onUploadProgress` allows handling of progress events for uploads</span>  <span class="token comment" spellcheck="true">// browser only</span>  onUploadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want with the native progress event</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `onDownloadProgress` allows handling of progress events for downloads</span>  <span class="token comment" spellcheck="true">// browser only</span>  onDownloadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want with the native progress event</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxContentLength` defines the max size of the http response content in bytes allowed in node.js</span>  maxContentLength<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed</span>  maxBodyLength<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `validateStatus` defines whether to resolve or reject the promise for a given</span>  <span class="token comment" spellcheck="true">// HTTP response status code. If `validateStatus` returns `true` (or is set to `null`</span>  <span class="token comment" spellcheck="true">// or `undefined`), the promise will be resolved; otherwise, the promise will be</span>  <span class="token comment" spellcheck="true">// rejected.</span>  validateStatus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxRedirects` defines the maximum number of redirects to follow in node.js.</span>  <span class="token comment" spellcheck="true">// If set to 0, no redirects will be followed.</span>  maxRedirects<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `socketPath` defines a UNIX Socket to be used in node.js.</span>  <span class="token comment" spellcheck="true">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span>  <span class="token comment" spellcheck="true">// Only either `socketPath` or `proxy` can be specified.</span>  <span class="token comment" spellcheck="true">// If both are specified, `socketPath` is used.</span>  socketPath<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span>  <span class="token comment" spellcheck="true">// and https requests, respectively, in node.js. This allows options to be added like</span>  <span class="token comment" spellcheck="true">// `keepAlive` that are not enabled by default.</span>  httpAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  httpsAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">https<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `proxy` defines the hostname and port of the proxy server.</span>  <span class="token comment" spellcheck="true">// You can also define your proxy using the conventional `http_proxy` and</span>  <span class="token comment" spellcheck="true">// `https_proxy` environment variables. If you are using environment variables</span>  <span class="token comment" spellcheck="true">// for your proxy configuration, you can also define a `no_proxy` environment</span>  <span class="token comment" spellcheck="true">// variable as a comma-separated list of domains that should not be proxied.</span>  <span class="token comment" spellcheck="true">// Use `false` to disable proxies, ignoring environment variables.</span>  <span class="token comment" spellcheck="true">// `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and</span>  <span class="token comment" spellcheck="true">// supplies credentials.</span>  <span class="token comment" spellcheck="true">// This will set an `Proxy-Authorization` header, overwriting any existing</span>  <span class="token comment" spellcheck="true">// `Proxy-Authorization` custom headers you have set using `headers`.</span>  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>    auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">'mikeymike'</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">'rapunz3l'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `cancelToken` specifies a cancel token that can be used to cancel the request</span>  <span class="token comment" spellcheck="true">// (see Cancellation section below for details)</span>  cancelToken<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `decompress` indicates whether or not the response body should be decompressed </span>  <span class="token comment" spellcheck="true">// automatically. If set to `true` will also remove the 'content-encoding' header </span>  <span class="token comment" spellcheck="true">// from the responses objects of all decompressed responses</span>  <span class="token comment" spellcheck="true">// - Node only (XHR cannot turn off decompression)</span>  decompress<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// default</span><span class="token punctuation">}</span></code></pre><h3 id="response-schema"><a href="#response-schema" class="headerlink" title="response schema"></a>response schema</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `data` is the response that was provided by the server</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `status` is the HTTP status code from the server response</span>  status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `statusText` is the HTTP status message from the server response</span>  statusText<span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `headers` the HTTP headers that the server responded with</span>  <span class="token comment" spellcheck="true">// All header names are lower cased and can be accessed using the bracket notation.</span>  <span class="token comment" spellcheck="true">// Example: `response.headers['content-type']`</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `config` is the config that was provided to `axios` for the request</span>  config<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `request` is the request that generated this response</span>  <span class="token comment" spellcheck="true">// It is the last ClientRequest instance in node.js (in redirects)</span>  <span class="token comment" spellcheck="true">// and an XMLHttpRequest instance in the browser</span>  request<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ol><li><p>axios(config)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>   lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>axios(url[, config])</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>错误捕获</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// The request was made and the server responded with a status code</span>   <span class="token comment" spellcheck="true">// that falls out of the range of 2xx</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// The request was made but no response was received</span>   <span class="token comment" spellcheck="true">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span>   <span class="token comment" spellcheck="true">// http.ClientRequest in node.js</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Something happened in setting up the request that triggered an Error</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>create instance</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// instance 拥有axios axios.default 一样的方法，instance、axios、axios.default 之间是相互独立的，设置的拦截器相互不影响</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> baseURL<span class="token punctuation">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span> timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Custom-Header'</span><span class="token punctuation">:</span> <span class="token string">'foobar'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>拦截器(可以拦截axios、axios.default、也可以是axios create的 instance)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Add a request interceptor</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Do something before request is sent</span> <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Do something with request error</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add a response interceptor</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Any status code that lie within the range of 2xx cause this function to trigger</span> <span class="token comment" spellcheck="true">// Do something with response data</span> <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Any status codes that falls outside the range of 2xx cause this function to trigger</span> <span class="token comment" spellcheck="true">// Do something with response error</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除拦截器</span><span class="token keyword">const</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>取消请求</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cancelToken<span class="token punctuation">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>thrown<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request canceled'</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// handle error</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'new name'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cancelToken<span class="token punctuation">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// cancel the request (the message parameter is optional)</span>source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'Operation canceled by the user.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. new CancelToken</span><span class="token keyword">let</span> cancel<span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000/api/test'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cancelToken<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// An executor function receives a cancel function as a parameter</span>   cancel <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>thrown<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request canceled'</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// handle error</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经成功的请求不会取消，如果时间到了还没成功，就会取消</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'request cancel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>axios 跨域cookie</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 跨域需要服务端支持，允许请求的origin</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 设置携带其他域cookie</span> withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>axios 实现下载excel</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/dowoload/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 以buffer的形式返回</span> responseType<span class="token punctuation">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">case</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 返回data</span>     <span class="token keyword">const</span> res <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">default</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 转为blob，创建本地资源url</span> <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span> a<span class="token punctuation">.</span>download <span class="token operator">=</span> props<span class="token punctuation">.</span>filename <span class="token operator">||</span> <span class="token string">'导出.xlsx'</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实现本地下载</span> a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>参数格式 默认axios将JavaScript对象序列化为JSON 如 使用 application/x-www-form-urlencoded format,具体请看axios defaults.js源码</p><ul><li>browser<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 在浏览器中</span> <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>qs<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'qs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'bar'</span><span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>es6<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'bar'</span><span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>   method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>   headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>   url<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>nodejs<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://something.com/'</span><span class="token punctuation">,</span> querystring<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/axios/axios#request-method-aliases" target="_blank" rel="noopener">axios github</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react-batch-update策略</title>
      <link href="/2020/09/11/react-batch-update/"/>
      <url>/2020/09/11/react-batch-update/</url>
      
        <content type="html"><![CDATA[<h3 id="先思考两个问题"><a href="#先思考两个问题" class="headerlink" title="先思考两个问题"></a>先思考两个问题</h3><ol><li><p>一个function多次setstate</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 脱离react优化钩子，每次setstate都会触发render</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>   Parent clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 每次点击打印</span><span class="token comment" spellcheck="true">// render component</span><span class="token comment" spellcheck="true">// render component</span><span class="token comment" spellcheck="true">// 触发两次</span><span class="token comment" spellcheck="true">// 去除setTimeout</span><span class="token comment" spellcheck="true">// 每次打印</span><span class="token comment" spellcheck="true">// render component</span><span class="token comment" spellcheck="true">// 触发一次</span></code></pre></li><li><p>事件点击</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>   <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>     Parent clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times     <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>   <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Child clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 每次点击打印</span><span class="token comment" spellcheck="true">// render child</span><span class="token comment" spellcheck="true">// render parent</span><span class="token comment" spellcheck="true">// render child</span><span class="token comment" spellcheck="true">// *** 进入 react click 的事件函数 ***</span><span class="token comment" spellcheck="true">// Child (onClick) 触发点击</span><span class="token comment" spellcheck="true">//   - setState 修改 state</span><span class="token comment" spellcheck="true">//   - re-render Child 重新渲染 //   不必要的</span><span class="token comment" spellcheck="true">// Parent (onClick) 触发点击（冒泡）</span><span class="token comment" spellcheck="true">//   - setState 修改 state</span><span class="token comment" spellcheck="true">//   - re-render Parent 重新渲染</span><span class="token comment" spellcheck="true">//   - re-render Child 重新渲染 （渲染是自顶向下的，父组件更新会导致子组件更新）</span><span class="token comment" spellcheck="true">// *** 退出 react click 的事件函数  ***</span><span class="token comment" spellcheck="true">// 去除setTimeout每次打印</span><span class="token comment" spellcheck="true">// render parent</span><span class="token comment" spellcheck="true">// render child</span></code></pre></li></ol><h3 id="react的做法"><a href="#react的做法" class="headerlink" title="react的做法"></a>react的做法</h3><ol><li>每次setState都渲染是很浪费性能的，所以react做了batchUpdate</li><li>通过isBatchingUpdates 标志，判断是不是可以batchupdate</li><li>react 合成事件（react对事件做过一次封装，我们成为合成事件），在合成事件里面，react会做一个wrapper，react可以知道什么时候开始、什么时候结束，会标记isBatchingUpdates为true，在事件结束时统一更新state</li><li>同理react生命周期里面也会有这样的优化</li></ol><h3 id="react做不到的优化"><a href="#react做不到的优化" class="headerlink" title="react做不到的优化"></a>react做不到的优化</h3><ol><li>settimeout</li><li>promise</li><li>async function</li><li>…<br>这些方法是异步的，react并不知道什么时候end（react wrapper方法已经执行完了，异步方法的callback为后面的event_loop的执行， react并没有对callback做wrapper，所以就没有isBatchingUpdates 标志位，每次setstate都会触发render）</li></ol><h3 id="异步中的解决方案"><a href="#异步中的解决方案" class="headerlink" title="异步中的解决方案"></a>异步中的解决方案</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ReactDOM<span class="token punctuation">.</span><span class="token function">unstable_batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>      Parent clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 每次点击打印</span><span class="token comment" spellcheck="true">// render component</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://medium.com/swlh/react-state-batch-update-b1b61bd28cd2" target="_blank" rel="noopener">React State Batch Update</a></li><li><a href="https://zhuanlan.zhihu.com/p/78516581" target="_blank" rel="noopener">深入 react 细节之 - batchUpdate</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决canvas绘图模糊问题</title>
      <link href="/2020/09/03/%E8%A7%A3%E5%86%B3canvas%E7%BB%98%E5%9B%BE%E6%A8%A1%E7%B3%8A%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/03/%E8%A7%A3%E5%86%B3canvas%E7%BB%98%E5%9B%BE%E6%A8%A1%E7%B3%8A%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ol><li>像素<ul><li><strong>像素，图像显示的基本单位</strong>，英文pixel(picture + element)</li><li>显示器的一个像素就是一个方格，电脑显示器、手机显示器，都是由一个个方格像素点组成，类似于显示的基本单位</li><li>一个像素点，同一时刻只能显示一种颜色，这个颜色由三原色调配组成</li><li>人们常说的相机有800w像素，就是指相机拍的一张照片上有800w个像素点。同样大小的照片，像素越高，就越清晰、精细</li></ul></li><li>分辨率（解析度）<ul><li><strong>图像分辨率(ppi)：每英寸的像素数</strong><br>如：一幅图宽8英寸、高6英寸，分辨率为100PPI，如果保持图像文件的大小不变，也就是总的像素数不变，将分辨率降为50PPI，在宽高比不变的情况下，图像的宽将变为16英寸、高将变为12英寸。</li><li>pt， point，点，印刷行业常用单位，等于1/72英寸。</li><li><strong>输出分辨率(dpi)：设备输出图像时每英寸可产生的点数</strong>（打印时使用）, 电子设备中 dpi===ppi</li><li><strong>dp，dip， Density-independent pixel，安卓开发用的长度单位。</strong>以160ppi为标准，和iPhone的scale差不多的意思。安卓用dp适配，系统会自动将dp转换为px。当屏幕像素点密度为160ppi时，  1dp=1px。</li></ul></li></ol><h3 id="canvas-高dpi下模糊的原因"><a href="#canvas-高dpi下模糊的原因" class="headerlink" title="canvas 高dpi下模糊的原因"></a>canvas 高dpi下模糊的原因</h3><ol><li><p>canvas宽高和样式宽高,如下代码：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><ul><li>width、height代表canvas实际大小，这个大小决定了canvas像素大小</li><li>style width、height 代表css像素（对应设备）<br>问题解析:<br>如上示例canvas像素为 320 * 150, 在dpi为1的设备上一比一展示是正常的，但是在<strong>在retina屏幕下，1个canvas像素（或者说是1个位图像素）将会填充4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊。</strong></li></ul></li><li><p>解决办法</p><ul><li><p>模糊是像素不够就近取色导致的，所以解决方案就是补充像素，将canvas width、height 扩大dpr倍，里面图形也放大dpr倍，这样在retina屏幕下图形也能一个像素点对应一个像素点</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">canvas </span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">function</span> <span class="token function">setupCanvas</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取devicePixelRatio， 物理像素/css像素 比</span>     <span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>     <span class="token keyword">const</span> rate <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>dpr     <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// canvas宽高设置 dpr 倍</span>     canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">*</span> dpr<span class="token punctuation">;</span>     canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">*</span> dpr<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// canvas放大，内容也放大dpr倍</span>     ctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>dpr<span class="token punctuation">,</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置指定canvas css宽高</span>     canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>     canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>     <span class="token comment" spellcheck="true">// 或者通过transform 改变canvas css大小</span>     <span class="token comment" spellcheck="true">// 设置canvas transformOrigin</span>     <span class="token comment" spellcheck="true">// canvas.style.transformOrigin = '0px 0px'</span>     <span class="token comment" spellcheck="true">// 由于canvas放大了dpr倍，需要在显示的时候，css缩放为的1/dpr</span>     <span class="token comment" spellcheck="true">// canvas.style.transform = `scale(${rate}, ${rate})`</span>     <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myCanvas'</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token function">setupCanvas</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>   ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"30px Arial"</span><span class="token punctuation">;</span>   ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"Demo!"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://www.fly63.com/article/detial/3091" target="_blank" rel="noopener">Canvas在移动端绘制模糊的原因与解决办法</a></li><li><a href="https://medium.com/wdstack/fixing-html5-2d-canvas-blur-8ebe27db07da" target="_blank" rel="noopener">Fixing HTML5 2d Canvas Blur</a></li><li><a href="https://www.html5rocks.com/en/tutorials/canvas/hidpi/" target="_blank" rel="noopener">High DPI Canvas</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react-test-libary</title>
      <link href="/2020/08/25/react-test-libary/"/>
      <url>/2020/08/25/react-test-libary/</url>
      
        <content type="html"><![CDATA[<h3 id="reader"><a href="#reader" class="headerlink" title="reader"></a>reader</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>  ui<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* You won't often use this, expand below for docs on options */</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> RenderResult<span class="token comment" spellcheck="true">// custom render</span><span class="token comment" spellcheck="true">// test-utils.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@testing-library/react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my-ui-lib'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TranslationProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my-i18n-lib'</span><span class="token keyword">import</span> defaultStrings <span class="token keyword">from</span> <span class="token string">'i18n/en-x-default'</span><span class="token keyword">const</span> AllTheProviders <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ThemeProvider theme<span class="token operator">=</span><span class="token string">"light"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>TranslationProvider messages<span class="token operator">=</span><span class="token punctuation">{</span>defaultStrings<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>children<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>TranslationProvider<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeProvider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> customRender <span class="token operator">=</span> <span class="token punctuation">(</span>ui<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">render</span><span class="token punctuation">(</span>ui<span class="token punctuation">,</span> <span class="token punctuation">{</span> wrapper<span class="token punctuation">:</span> AllTheProviders<span class="token punctuation">,</span> <span class="token operator">...</span>options <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// re-export everything</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'@testing-library/react'</span><span class="token comment" spellcheck="true">// override render method</span><span class="token keyword">export</span> <span class="token punctuation">{</span> customRender <span class="token keyword">as</span> render <span class="token punctuation">}</span></code></pre><ol><li><p>options</p><ul><li>container</li><li>baseElement</li><li>hydrate</li><li>wrapper</li><li>queries</li></ul></li><li><p>renderResult</p><ul><li><p>…queries</p><ol><li>document.body<ul><li>getBy<blockquote><p>返回第一个匹配到的值，没有报错</p></blockquote></li><li>getAllBy<blockquote><p>返回所有匹配到的值，没有报错</p></blockquote></li><li>queryBy<blockquote><p>返回第一个匹配到的值，没找到返回null</p></blockquote></li><li>queryAllBy<blockquote><p>返回所有匹配到的值，没找到返回[]</p></blockquote></li><li>findBy<blockquote><p>返回一个promise, resolve第一个匹配到的值，没有reject</p></blockquote></li><li>findAllBy<blockquote><p>返回一个promise, resolve element[]，没有reject</p></blockquote></li></ul></li><li>Queries<ul><li>ByLabelText</li><li>ByPlaceholderText</li><li>ByText</li><li>ByAltText</li><li>ByTitle</li><li>ByDisplayValue</li><li>ByRole</li><li>ByTestId</li></ul></li></ol></li><li><p>container  </p></li><li><p>baseElement</p><blockquote><p>default document.body</p></blockquote></li><li><p>debug</p><blockquote><p>console.log(prettyDOM(baseElement))</p></blockquote></li><li><p>rerender</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@testing-library/react'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> rerender <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>NumberDisplay number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// re-render the same component with different props</span><span class="token function">rerender</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>NumberDisplay number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span></code></pre></li><li><p>unmount</p></li><li><p>asFragment</p></li></ul></li></ol><h3 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h3><blockquote><p>卸载render的组件<br>test.afterEach(cleanup)</p></blockquote><h3 id="act"><a href="#act" class="headerlink" title="act"></a>act</h3><h3 id="react-test-libary文档"><a href="#react-test-libary文档" class="headerlink" title="react-test-libary文档"></a>react-test-libary文档</h3><p><a href="https://testing-library.com/docs/intro" target="_blank" rel="noopener">jest</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jest-api</title>
      <link href="/2020/08/25/jest-api/"/>
      <url>/2020/08/25/jest-api/</url>
      
        <content type="html"><![CDATA[<h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><ul><li><p>beforeAll(fn, timeout)</p></li><li><p>afterAll(fn, timeout)</p></li><li><p>beforeEach(fn, timeout)</p></li><li><p>afterEach(fn, timeout)</p></li><li><p>describe</p><blockquote><p>describe(name, fn)<br>describe.each(table)(name, fn)</p></blockquote><ul><li>only 只运行当前语法块（一般调试有问题的测试模块时使用）</li><li>skip 跳过当前语法块 (遇到比较棘手的问题，又想把其他的测试跑完，可以先跳过)</li></ul></li><li><p>test(it) </p><blockquote><p>test(name, fn, timeout)<br>test.each(table)(name, fn, timeout)<br>test.concurrent(name, fn, timeout) experimental</p></blockquote><ul><li>only 只运行当前测试</li><li>skip 跳过当前测试</li><li>todo </li></ul><blockquote><p><strong>table</strong> </p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span>占位符<span class="token operator">%</span>p <span class="token operator">-</span> pretty<span class="token operator">-</span>format<span class="token punctuation">.</span><span class="token operator">%</span>s<span class="token operator">-</span> String<span class="token punctuation">.</span><span class="token operator">%</span>d<span class="token operator">-</span> Number<span class="token punctuation">.</span><span class="token operator">%</span>i <span class="token operator">-</span> Integer<span class="token punctuation">.</span><span class="token operator">%</span>f <span class="token operator">-</span> Floating point value<span class="token punctuation">.</span><span class="token operator">%</span>j <span class="token operator">-</span> JSON<span class="token punctuation">.</span><span class="token operator">%</span>o <span class="token operator">-</span> Object<span class="token punctuation">.</span><span class="token operator">%</span># <span class="token operator">-</span> Index <span class="token keyword">of</span> the test <span class="token keyword">case</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token operator">%</span> <span class="token operator">-</span> single percent sign <span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">.</span> This does not consume an argument<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// example</span>describe<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'.add(%i, %i)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returns </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returned value not be greater than </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returned value not be less than </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> template<span class="token comment" spellcheck="true">// example</span>describe<span class="token punctuation">.</span>each<span class="token template-string"><span class="token string">`  a    | b    | expected  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">3</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">3</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">(</span><span class="token string">'$a + $b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expected<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returns </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returned value not be greater than </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`returned value not be less than </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h3><p>  expect(received).toEqual(expected)</p><ul><li><p>received</p><ol><li>expect(value) except(value).not</li></ol></li><li><p>matcher</p><ol><li><p>constom</p><ul><li>api<pre class=" language-typescript"><code class="language-typescript">expect<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">yourMatcher</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     pass<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// false => test failed</span>     message<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>ts interface<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> global <span class="token punctuation">{</span>namespace jest <span class="token punctuation">{</span> <span class="token keyword">interface</span> <span class="token class-name">Matchers</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token function">toBeWithinRange</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> R<span class="token punctuation">;</span>   <span class="token function">getExternalValueFromRemoteSource</span><span class="token punctuation">(</span>received<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>example<pre class=" language-typescript"><code class="language-typescript">expect<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token function">toBeWithinRange</span><span class="token punctuation">(</span>received<span class="token punctuation">,</span> floor<span class="token punctuation">,</span> ceiling<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">const</span> pass <span class="token operator">=</span> received <span class="token operator">>=</span> floor <span class="token operator">&amp;&amp;</span> received <span class="token operator">&lt;=</span> ceiling<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>       <span class="token template-string"><span class="token string">`expected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>received<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not to be within range </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>floor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ceiling<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>     pass<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>       <span class="token template-string"><span class="token string">`expected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>received<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to be within range </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>floor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ceiling<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>     pass<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>async <span class="token function">toBeDivisibleByExternalValue</span><span class="token punctuation">(</span>received<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">const</span> externalValue <span class="token operator">=</span> await <span class="token function">getExternalValueFromRemoteSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> pass <span class="token operator">=</span> received <span class="token operator">%</span> externalValue <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>       <span class="token template-string"><span class="token string">`expected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>received<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not to be divisible by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>externalValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>     pass<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>       <span class="token template-string"><span class="token string">`expected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>received<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to be divisible by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>externalValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>     pass<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'numeric ranges'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeWithinRange</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeWithinRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>apples<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> bananas<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   apples<span class="token punctuation">:</span> expect<span class="token punctuation">.</span><span class="token function">toBeWithinRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   bananas<span class="token punctuation">:</span> expect<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeWithinRange</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'is divisible by external value'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> await <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDivisibleByExternalValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> await <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeDivisibleByExternalValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>system</p><ol><li><p>type</p><ul><li>toBeDefined()</li><li>toBeTruthy()</li><li>toBeFalsy()</li><li>toBeInstanceOf(Class)</li><li>toBeNull()</li><li>toBeUndefined()</li><li>toBeNaN()</li></ul></li><li><p>compare</p><ul><li>expect.anything()<blockquote><p>匹配非null和undefined的任意值</p></blockquote></li><li>expect.any(constructor)<blockquote><p>匹配任意由constructor创建的值</p></blockquote></li><li>toBe(value)<blockquote><p>strict equailty ===</p></blockquote></li><li>toBeCloseTo<blockquote><p>浮点数运算使用</p></blockquote></li><li>toBeGreaterThan</li><li>toBeGreaterThanOrEqual</li><li>toBeLessThan</li><li>toBeLessThanOrEqual</li></ul></li><li><p>function</p><ul><li>toHaveBeenCalled()</li><li>toHaveBeenCalledTimes(number)</li><li>toHaveBeenCalledWith(arg1, arg2, …)</li><li>toHaveBeenLastCalledWith(arg1, arg2, …)</li><li>toHaveBeenNthCalledWith(nthCall, arg1, arg2, ….)<pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'drinkEach drinks each drink'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> drink <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">drinkEach</span><span class="token punctuation">(</span>drink<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'lemon'</span><span class="token punctuation">,</span> <span class="token string">'octopus'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenNthCalledWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenNthCalledWith</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'octopus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>toHaveReturned()</li><li>toHaveReturnedTimes(number)</li><li>toHaveReturnedWith(value)</li><li>toHaveLastReturnedWith(value)</li><li>toHaveNthReturnedWith(nthCall, value)<pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'drink returns expected nth calls'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> beverage1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'La Croix (Lemon)'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> beverage2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'La Croix (Orange)'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> drink <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>beverage <span class="token operator">=</span><span class="token operator">></span> beverage<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">drink</span><span class="token punctuation">(</span>beverage1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">drink</span><span class="token punctuation">(</span>beverage2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveNthReturnedWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'La Croix (Lemon)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveNthReturnedWith</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'La Croix (Orange)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>promise</p><ul><li>resolves<pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'resolves to lemon'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// make sure to add a return statement</span>  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'resolves to lemon'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  await <span class="token function">expect</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  await <span class="token function">expect</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'octopus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>rejects</li><li>toThrow<pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'rejects to octopus'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// make sure to add a return statement</span>  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'octopus'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span>    <span class="token string">'octopus'</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'rejects to octopus'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  await <span class="token function">expect</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'octopus'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'octopus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>asserts</p><ul><li><p>expect.assertions</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 断言执行的次数</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'doAsync calls both callbacks'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callback1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">callback2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">doAsync</span><span class="token punctuation">(</span>callback1<span class="token punctuation">,</span> callback2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>expect.hasAssertions</p></li></ul></li><li><p>string</p><ul><li>expect.stringContaining</li><li>expect.stringMatching</li><li>toHaveLength</li><li>toMatch</li></ul></li><li><p>object</p><ul><li>expect.objectContaining<blockquote><p>包含</p></blockquote></li><li>toHaveProperty(keyPath, value?)<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> houseForSale <span class="token operator">=</span> <span class="token punctuation">{</span>bath<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>bedrooms<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>kitchen<span class="token punctuation">:</span> <span class="token punctuation">{</span>  amenities<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  area<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  wallColor<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>  <span class="token string">'nice.oven'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'ceiling.height'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'this house has my desired features'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Example Referencing</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">'bath'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">'bedrooms'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Deep referencing using dot notation</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">'kitchen.area'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">'kitchen.amenities'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'oven'</span><span class="token punctuation">,</span>  <span class="token string">'stove'</span><span class="token punctuation">,</span>  <span class="token string">'washer'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Deep referencing using an array containing the keyPath</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'kitchen'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span><span class="token string">'kitchen'</span><span class="token punctuation">,</span> <span class="token string">'amenities'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'kitchen'</span><span class="token punctuation">,</span> <span class="token string">'amenities'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'oven'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'kitchen'</span><span class="token punctuation">,</span> <span class="token string">'nice.oven'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>houseForSale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ceiling.height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'tall'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>toEqual</li><li>toMatchObject<blockquote><p>包含</p></blockquote></li><li>toStrictEqual<blockquote><p>{a: undefined, b: 2} not toStrictEqual {b: 2}</p></blockquote></li></ul></li><li><p>array</p><ul><li>expect.arrayContaining(array)<blockquote><p>包含</p></blockquote></li><li>toHaveLength</li><li>toContain</li><li>toContainEqual<blockquote><p>匹配所有值</p></blockquote></li><li>toStrictEqual<blockquote><p>[, 1] not toStrictEqual [undefined, 1]</p></blockquote></li></ul></li><li><p>snapshot</p><ul><li>expect.addSnapshotSerializer</li><li>toMatchSnapshot</li><li>toMatchInlineSnapshot</li><li>toThrowErrorMatchingSnapshot</li><li>toThrowErrorMatchingInlineSnapshot</li></ul></li></ol></li></ol></li></ul><h3 id="mocks"><a href="#mocks" class="headerlink" title="mocks"></a>mocks</h3><ol><li><p>mock modules</p><ul><li><p>jest.disableAutomock()</p><blockquote><p>禁用automock；所有的 require() 都会返回真是的版本，而不是mock的版本</p></blockquote></li><li><p>jest.enableAutomock()</p></li><li><p>jest.createMockFromModule(moduleName)</p><blockquote><p>从真实的文件mock，默认为require() 返回的值</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// utils.js</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   authorize<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'token'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   isAuthorized<span class="token punctuation">:</span> secret <span class="token operator">=</span><span class="token operator">></span> secret <span class="token operator">===</span> <span class="token string">'wizard'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// __tests__/createMockFromModule.test.js</span> <span class="token keyword">const</span> utils <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">createMockFromModule</span><span class="token punctuation">(</span><span class="token string">'../utils'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span> utils<span class="token punctuation">.</span>isAuthorized <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>secret <span class="token operator">=</span><span class="token operator">></span> secret <span class="token operator">===</span> <span class="token string">'not wizard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'implementation created by jest.createMockFromModule'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token function">expect</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span>authorize<span class="token punctuation">.</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isAuthorized</span><span class="token punctuation">(</span><span class="token string">'not wizard'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>jest.mock(moduleName, factory, options)</p><blockquote><p>自动mock, 如果没有实现factory，将返回undefined</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// banana.js</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'banana'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// __tests__/test.js</span> jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'../banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> banana <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// banana will be explicitly mocked.</span> <span class="token function">banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return  undefined</span> <span class="token keyword">import</span> moduleName<span class="token punctuation">,</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../moduleName'</span><span class="token punctuation">;</span> jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'../moduleName'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     __esModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token keyword">default</span><span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     foo<span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">moduleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Will return 42</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Will return 43</span></code></pre></li><li><p>jest.unmock(moduleName)</p><blockquote><p>指定某个文件使用真是的moudle</p></blockquote></li><li><p>jest.doMock(moduleName, factory, options)</p><blockquote><p>jest.mock 是要放在top level的， doMock可以在语法块里面</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'moduleName 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   jest<span class="token punctuation">.</span><span class="token function">doMock</span><span class="token punctuation">(</span><span class="token string">'../moduleName'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> moduleName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../moduleName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">moduleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'moduleName 2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   jest<span class="token punctuation">.</span><span class="token function">doMock</span><span class="token punctuation">(</span><span class="token string">'../moduleName'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> moduleName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../moduleName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">moduleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>jest.dontMock(moduleName)</p></li><li><p>jest.setMock(moduleName, moduleExports)</p></li><li><p>jest.requireActual(moduleName)</p></li><li><p>jest.requireMock(moduleName)</p></li><li><p>jest.resetModules()</p><blockquote><p>reset cache value</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> sum1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../sum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> sum2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../sum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sum1 <span class="token operator">===</span> sum2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><p>jest.isolateModules(fn)</p><blockquote><p>隔离moudle，类似于创建一个沙箱</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> myModule<span class="token punctuation">;</span> jest<span class="token punctuation">.</span><span class="token function">isolateModules</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'myModule'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> otherCopyOfMyModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'myModule'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>mock functions </p><ul><li><p>jest.fn(implementation)</p></li><li><p>jest.isMockFunction(fn)</p></li><li><p>jest.spyOn(object, methodName)</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> video <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> video<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// test</span> <span class="token keyword">const</span> video <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'plays video'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> spy <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> <span class="token string">'play'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> isPlaying <span class="token operator">=</span> video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">expect</span><span class="token punctuation">(</span>isPlaying<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   spy<span class="token punctuation">.</span><span class="token function">mockRestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>jest.spyOn(object, methodName, accessType?)</p><blockquote><p>accessType set | get</p></blockquote></li><li><p>jest.clearAllMocks()</p><blockquote><p>清除所有mocks 的 mock.calls mock.instances 属性</p></blockquote></li><li><p>jest.resetAllMocks()</p><blockquote><p>清除所有mocks 的所有状态</p></blockquote></li><li><p>jest.restoreAllMocks()</p><blockquote><p>返回到orgin的状态</p></blockquote></li><li><p>mockFn</p><ul><li><p>.getMockName()</p></li><li><p>.mock.calls</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token string">'arg2'</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">'arg3'</span><span class="token punctuation">,</span> <span class="token string">'arg4'</span><span class="token punctuation">)</span>mock<span class="token punctuation">.</span>calls <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'args1'</span><span class="token punctuation">,</span> <span class="token string">'args2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'args3'</span><span class="token punctuation">,</span> <span class="token string">'args4'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></li><li><p>.mock.results</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>     type<span class="token punctuation">:</span> <span class="token string">'return'</span><span class="token punctuation">,</span>     value<span class="token punctuation">:</span> <span class="token string">'result1'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>     type<span class="token punctuation">:</span> <span class="token string">'throw'</span><span class="token punctuation">,</span>     value<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">/* Error instance */</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>     type<span class="token punctuation">:</span> <span class="token string">'return'</span><span class="token punctuation">,</span>     value<span class="token punctuation">:</span> <span class="token string">'result2'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>.mock.instances</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>mockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p>.mockClear()</p><blockquote><p>清除 mockFn.mock.calls和mockFn.mock.instances</p></blockquote></li><li><p>.mockReset()</p><blockquote><p>返回到初始化的状态</p></blockquote></li><li><p>.mockRestore()</p><blockquote><p>返回到origin</p></blockquote></li><li><p>.mockImplementation(fn)</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span>scalar <span class="token operator">=</span><span class="token operator">></span> <span class="token number">42</span> <span class="token operator">+</span> scalar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// or: jest.fn(scalar => 42 + scalar);</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> b <span class="token operator">===</span> <span class="token number">43</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> mockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> mockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p>.mockImplementationOnce(fn)</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> jest   <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'default'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'first call'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'second call'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'first call', 'second call', 'default', 'default'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>.mockName(value)</p><blockquote><p>打印信息用</p></blockquote></li><li><p>.mockReturnThis()</p></li><li><p>.mockReturnValue(value)</p></li><li><p>.mockReturnValueOnce(value)</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> jest   <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">mockReturnValue</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token string">'first call'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token string">'second call'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'first call', 'second call', 'default', 'default'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>.mockResolvedValue(value)</p><blockquote><p>jest.fn().mockImplementation(() =&gt; Promise.resolve(value));</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'async test'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> asyncMock <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 43</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>.mockResolvedValueOnce(value)</p><blockquote><p>jest.fn().mockImplementationOnce(() =&gt; Promise.resolve(value));</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'async test'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> asyncMock <span class="token operator">=</span> jest     <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">mockResolvedValueOnce</span><span class="token punctuation">(</span><span class="token string">'first call'</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">mockResolvedValueOnce</span><span class="token punctuation">(</span><span class="token string">'second call'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first call</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// second call</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>.mockRejectedValue(value)</p><blockquote><p>jest.fn().mockImplementation(() =&gt; Promise.reject(value));</p></blockquote></li><li><p>.mockRejectedValueOnce(value)</p><blockquote><p>jest.fn().mockImplementationOnce(() =&gt; Promise.reject(value));</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'async test'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> asyncMock <span class="token operator">=</span> jest     <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">mockResolvedValueOnce</span><span class="token punctuation">(</span><span class="token string">'first call'</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">mockRejectedValueOnce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Async error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first call</span>   <span class="token keyword">await</span> <span class="token function">asyncMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// throws "Async error"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>mock timers</p><ul><li><p>jest.useFakeTimers(implementation?: ‘modern’ | ‘legacy’)</p></li><li><p>jest.useRealTimers()</p></li><li><p>jest.runAllTicks()</p><blockquote><p>执行所有的微任务 process.nextTick</p></blockquote></li><li><p>jest.runAllTimers()</p><blockquote><p>执行所有的微任务和宏任务 process.nextTick setTimeout setInterval setImmediate</p></blockquote></li><li><p>jest.runAllImmediates()</p><blockquote><p>执行所有的 setImmediate</p></blockquote></li><li><p>jest.advanceTimersByTime(msToRun)</p><blockquote><p>当前时间提前 msToRun毫秒，比如一个任务需要1000ms后执行, jest.advanceTimersByTime(1000) 就会立即执行</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// timerGame.js</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">timerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ready....go!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Time's up -- stop!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> timerGame<span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'calls the callback after 1 second via advanceTimersByTime'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">const</span> timerGame <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../timerGame'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> callback <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">timerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// At this point in time, the callback should not have been called yet</span> <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Fast-forward until all timers have been executed</span> jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Now our callback should have been called!</span> <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>jest.runOnlyPendingTimers()</p><blockquote><p>只执行已经 pending的task</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// infiniteTimerGame.js</span> <span class="token string">'use strict'</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ready....go!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Time's up! 10 seconds before the next game starts..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Schedule the next game in 10 seconds</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> infiniteTimerGame<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// __tests__/infiniteTimerGame-test.js</span> <span class="token string">'use strict'</span><span class="token punctuation">;</span> jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'infiniteTimerGame'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'schedules a 10-second timer after 1 second'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> infiniteTimerGame <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../infiniteTimerGame'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> callback <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// At this point in time, there should have been a single call to</span>     <span class="token comment" spellcheck="true">// setTimeout to schedule the end of the game in 1 second.</span>     <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Fast forward and exhaust only currently pending timers</span>     <span class="token comment" spellcheck="true">// (but not any new timers that get created during that process)</span>     jest<span class="token punctuation">.</span><span class="token function">runOnlyPendingTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// At this point, our 1-second timer should have fired it's callback</span>     <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// And it should have created a new timer to start the game over in</span>     <span class="token comment" spellcheck="true">// 10 seconds</span>     <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>jest.advanceTimersToNextTimer(steps)</p></li><li><p>jest.clearAllTimers()</p></li><li><p>jest.getTimerCount()</p></li><li><p>jest.setSystemTime(now?: number | Date)</p></li><li><p>jest.getRealSystemTime()</p></li></ul></li><li><p>misc</p><ul><li>jest.setTimeout(timeout)<pre class=" language-javascript"><code class="language-javascript"> jest<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>jest.retryTimes()<pre class=" language-javascript"><code class="language-javascript"> jest<span class="token punctuation">.</span><span class="token function">retryTimes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'will fail'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><h3 id="jest文档"><a href="#jest文档" class="headerlink" title="jest文档"></a>jest文档</h3><p><a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener">jest</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2020/08/21/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/08/21/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="思考测试"><a href="#思考测试" class="headerlink" title="思考测试"></a>思考测试</h3><ol><li>什么是单元测试？什么事集成测试<br> 如果一个测试，需要用到真实的系统时间，真实的文件系统，或者真实的数据库，那么这个测试就进入了集成测试的范围。我们开发常说的测试属于单元测试的范畴</li><li>测试的作用是什么<ul><li>保证项目的稳定</li><li>提升代码的质量（一个好的代码，一定是可测试的）</li></ul></li><li>应该测试什么<ul><li>只测试输入和输出的正确性，不测试代码实现</li><li>只测试自己的代码，不测试三方库，或者引入的其他代码（三方库、其他代码的稳定应该由各自自己保证）</li><li>测试交互</li><li>测试结果分支</li><li>测试渲染结果</li></ul></li><li>一个UI测试框架应该具备哪些能力<ul><li>渲染页面 render（显示正确）</li><li>事件触发 event（交互正确）</li><li>mock操作，callback，timer、fetch、fs 等，因为这些东西属于三方提供的东西，不应该由自己的代码保证正确</li><li>其他<ul><li>断言</li><li>易编写</li><li>良好的错误提示等</li></ul></li></ul></li></ol><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Radio<span class="token punctuation">,</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RadioChangeEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd/lib/radio'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Calc</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token string">'increase'</span> <span class="token operator">|</span> <span class="token string">'decrease'</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'increase'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>userName<span class="token punctuation">,</span> setUserName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> RadioChangeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> handleClick <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">'increase'</span> <span class="token operator">?</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  async <span class="token keyword">function</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span>userId<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> await <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setUserName</span><span class="token punctuation">(</span>await response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetchUserData</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"user-name"</span><span class="token operator">></span>copy right <span class="token punctuation">{</span>userName<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>value <span class="token operator">===</span> <span class="token string">'increase'</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>每次加一<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>每次减一<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Radio<span class="token punctuation">.</span>Group id<span class="token operator">=</span><span class="token string">"test"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Radio value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>Radio<span class="token operator">></span>        <span class="token operator">&lt;</span>Radio value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>Radio<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Radio<span class="token punctuation">.</span>Group<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>modify<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p> 需要测试的东西</p><ol><li>能正常渲染</li><li>value === ‘increase’ 分支</li><li>radio onChange 触发逻辑</li><li>Button onclick 触发逻辑</li><li>username 正常渲染（根据ajax返回结果渲染）</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> act <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@testing-library/react'</span><span class="token keyword">import</span> Calc <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> fakerUser <span class="token operator">=</span> <span class="token string">'enochjs'</span>  jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">'fetch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          json<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>fakerUser<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> as <span class="token keyword">any</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>describe<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span><span class="token string">'test calc'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'render right'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token keyword">any</span>    await <span class="token function">act</span><span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      container <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Calc <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'每次加一'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'radio change'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token keyword">any</span>    await <span class="token function">act</span><span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      container <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Calc <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> radios <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>    <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      radios<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'每次减一'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'count change'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token keyword">any</span>    await <span class="token function">act</span><span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      container <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Calc <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> button <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'modify'</span><span class="token punctuation">)</span>    <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      button<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> radios <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>    <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      radios<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      button<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'render with fetch data'</span><span class="token punctuation">,</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token keyword">any</span>    await <span class="token function">act</span><span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      container <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Calc id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">queryByText</span><span class="token punctuation">(</span><span class="token string">"copy right enochjs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="mock-文件夹"><a href="#mock-文件夹" class="headerlink" title="__mock__ 文件夹"></a>__mock__ 文件夹</h3><blockquote><p>__mock__ 文件需要放在 request的同级目录下</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// request.js</span>  <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// This is an example of an http request, for example to fetch</span>      <span class="token comment" spellcheck="true">// user data from an API.</span>      <span class="token comment" spellcheck="true">// This module is being mocked in __mocks__/request.js</span>      http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> url<span class="token punctuation">}</span><span class="token punctuation">,</span> response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> _data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>data <span class="token operator">+</span><span class="token operator">=</span> _data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// __mocks__/request.js</span>  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Mark'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Paul'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> userID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">'/users/'</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        users<span class="token punctuation">[</span>userID<span class="token punctuation">]</span>          <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>userID<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              error<span class="token punctuation">:</span> <span class="token string">'User with '</span> <span class="token operator">+</span> userID <span class="token operator">+</span> <span class="token string">' not found.'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// user.js</span>  <span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'./request'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUserName</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/users/'</span> <span class="token operator">+</span> userID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// test</span>  jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'./request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> user <span class="token keyword">from</span> <span class="token string">'./user'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The assertion for a promise must be returned.</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'works with promises'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Testing for async errors using Promise.catch.</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'tests error with promises'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        error<span class="token punctuation">:</span> <span class="token string">'User with 2 not found.'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Or using async/await.</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'tests error with async/await'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        error<span class="token punctuation">:</span> <span class="token string">'User with 1 not found.'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Testing for async errors using `.rejects`.</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'tests error with rejects'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token string">'User with 3 not found.'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Or using async/await with `.rejects`.</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'tests error with async/await and rejects'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token string">'User with 3 not found.'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="mockTimer"><a href="#mockTimer" class="headerlink" title="mockTimer"></a>mockTimer</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// timeGame</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ready....go!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Time's up! 10 seconds before the next game starts..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Schedule the next game in 10 seconds</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// test</span>  <span class="token keyword">import</span> infiniteTimerGame <span class="token keyword">from</span> <span class="token string">'./timerGame'</span>  jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'infiniteTimerGame'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'schedules a 10-second timer after 1 second'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//   const infiniteTimerGame = require('../infiniteTimerGame');</span>      <span class="token keyword">const</span> callback <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// At this point in time, there should have been a single call to</span>      <span class="token comment" spellcheck="true">// setTimeout to schedule the end of the game in 1 second.</span>      <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Fast forward and exhaust only currently pending timers</span>      <span class="token comment" spellcheck="true">// (but not any new timers that get created during that process)</span>      jest<span class="token punctuation">.</span><span class="token function">runOnlyPendingTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// At this point, our 1-second timer should have fired it's callback</span>      <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// And it should have created a new timer to start the game over in</span>      <span class="token comment" spellcheck="true">// 10 seconds</span>      <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="更多知识请看API"><a href="#更多知识请看API" class="headerlink" title="更多知识请看API"></a>更多知识请看API</h3><ul><li><a href="/2020/08/25/jest-api/" title="jest-API地址">jest-API地址</a></li><li><a href="/2020/08/25/react-test-libary/" title="react-test-libary-API地址">react-test-libary-API地址</a></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://reactjs.org/docs/testing.html" target="_blank" rel="noopener">react</a></li><li><a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener">jest</a></li><li><a href="https://testing-library.com/docs/intro" target="_blank" rel="noopener">react-test-libary</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
